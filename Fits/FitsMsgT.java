/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'FitsMsgT'
 * message type.
 */

public class FitsMsgT extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 16;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 111;

    /** Create a new FitsMsgT of size 16. */
    public FitsMsgT() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new FitsMsgT of the given data_length. */
    public FitsMsgT(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT with the given data_length
     * and base offset.
     */
    public FitsMsgT(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT using the given byte array
     * as backing store.
     */
    public FitsMsgT(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT using the given byte array
     * as backing store, with the given base offset.
     */
    public FitsMsgT(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public FitsMsgT(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT embedded in the given message
     * at the given base offset.
     */
    public FitsMsgT(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new FitsMsgT embedded in the given message
     * at the given base offset and length.
     */
    public FitsMsgT(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <FitsMsgT> \n";
      try {
        s += "  [sourceaddr=0x"+Long.toHexString(get_sourceaddr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [receivedtime=0x"+Long.toHexString(get_receivedtime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqno=0x"+Long.toHexString(get_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [senttime=0x"+Long.toHexString(get_senttime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sentdelay=0x"+Long.toHexString(get_sentdelay())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sourceaddr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sourceaddr' is signed (false).
     */
    public static boolean isSigned_sourceaddr() {
        return false;
    }

    /**
     * Return whether the field 'sourceaddr' is an array (false).
     */
    public static boolean isArray_sourceaddr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sourceaddr'
     */
    public static int offset_sourceaddr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sourceaddr'
     */
    public static int offsetBits_sourceaddr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'sourceaddr'
     */
    public int get_sourceaddr() {
        return (int)getUIntElement(offsetBits_sourceaddr(), 16);
    }

    /**
     * Set the value of the field 'sourceaddr'
     */
    public void set_sourceaddr(int value) {
        setUIntElement(offsetBits_sourceaddr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sourceaddr'
     */
    public static int size_sourceaddr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sourceaddr'
     */
    public static int sizeBits_sourceaddr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: receivedtime
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'receivedtime' is signed (false).
     */
    public static boolean isSigned_receivedtime() {
        return false;
    }

    /**
     * Return whether the field 'receivedtime' is an array (false).
     */
    public static boolean isArray_receivedtime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'receivedtime'
     */
    public static int offset_receivedtime() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'receivedtime'
     */
    public static int offsetBits_receivedtime() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'receivedtime'
     */
    public long get_receivedtime() {
        return (long)getUIntElement(offsetBits_receivedtime(), 32);
    }

    /**
     * Set the value of the field 'receivedtime'
     */
    public void set_receivedtime(long value) {
        setUIntElement(offsetBits_receivedtime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'receivedtime'
     */
    public static int size_receivedtime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'receivedtime'
     */
    public static int sizeBits_receivedtime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqno
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqno' is signed (false).
     */
    public static boolean isSigned_seqno() {
        return false;
    }

    /**
     * Return whether the field 'seqno' is an array (false).
     */
    public static boolean isArray_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqno'
     */
    public static int offset_seqno() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqno'
     */
    public static int offsetBits_seqno() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'seqno'
     */
    public int get_seqno() {
        return (int)getUIntElement(offsetBits_seqno(), 16);
    }

    /**
     * Set the value of the field 'seqno'
     */
    public void set_seqno(int value) {
        setUIntElement(offsetBits_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqno'
     */
    public static int size_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqno'
     */
    public static int sizeBits_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: senttime
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'senttime' is signed (false).
     */
    public static boolean isSigned_senttime() {
        return false;
    }

    /**
     * Return whether the field 'senttime' is an array (false).
     */
    public static boolean isArray_senttime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'senttime'
     */
    public static int offset_senttime() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'senttime'
     */
    public static int offsetBits_senttime() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'senttime'
     */
    public long get_senttime() {
        return (long)getUIntElement(offsetBits_senttime(), 32);
    }

    /**
     * Set the value of the field 'senttime'
     */
    public void set_senttime(long value) {
        setUIntElement(offsetBits_senttime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'senttime'
     */
    public static int size_senttime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'senttime'
     */
    public static int sizeBits_senttime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sentdelay
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sentdelay' is signed (false).
     */
    public static boolean isSigned_sentdelay() {
        return false;
    }

    /**
     * Return whether the field 'sentdelay' is an array (false).
     */
    public static boolean isArray_sentdelay() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sentdelay'
     */
    public static int offset_sentdelay() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sentdelay'
     */
    public static int offsetBits_sentdelay() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'sentdelay'
     */
    public long get_sentdelay() {
        return (long)getUIntElement(offsetBits_sentdelay(), 32);
    }

    /**
     * Set the value of the field 'sentdelay'
     */
    public void set_sentdelay(long value) {
        setUIntElement(offsetBits_sentdelay(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sentdelay'
     */
    public static int size_sentdelay() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sentdelay'
     */
    public static int sizeBits_sentdelay() {
        return 32;
    }

}
